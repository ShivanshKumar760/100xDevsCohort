`body-parser` is a middleware for Node.js that is used with the Express framework to parse incoming request bodies. This middleware is essential for handling data sent in HTTP requests, such as form submissions or JSON payloads.

### Key Features of `body-parser`:

1. **Parsing JSON**: It can parse JSON payloads sent in the request body, making the data accessible as JavaScript objects.
2. **Parsing URL-encoded Data**: It can handle data encoded in `application/x-www-form-urlencoded`, which is commonly used by HTML forms.
3. **Parsing Text**: It can also parse plain text data.
4. **Customizable**: It provides options for customizing the size limits and handling of the incoming data.

### Usage

To use `body-parser` with an Express application, you need to install it first:

```bash
npm install body-parser
```

Then, you can use it in your Express app like this:

```javascript
import express from 'express';
import bodyParser from 'body-parser';

const app = express();

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Middleware to parse URL-encoded bodies
app.use(bodyParser.urlencoded({ extended: true }));

app.post('/data', (req, res) => {
  // Access parsed data from the request body
  console.log(req.body);
  res.send('Data received');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
```

### Explanation:

- `bodyParser.json()`: Parses incoming requests with JSON payloads and makes the data available in `req.body`.
- `bodyParser.urlencoded({ extended: true })`: Parses incoming requests with URL-encoded data (typically from HTML forms) and makes the data available in `req.body`. The `extended` option allows for richer objects and arrays to be encoded in the URL-encoded format.

### Note:

As of Express 4.16.0, `body-parser` middleware is now included in Express itself, so you can use the built-in methods directly without needing to install `body-parser` separately. Here's how you would use the built-in functionality:

```javascript
import express from 'express';

const app = express();

// Use built-in middleware to parse JSON bodies
app.use(express.json());

// Use built-in middleware to parse URL-encoded bodies
app.use(express.urlencoded({ extended: true }));

app.post('/data', (req, res) => {
  // Access parsed data from the request body
  console.log(req.body);
  res.send('Data received');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
```

In this updated example, `express.json()` and `express.urlencoded()` are used to handle JSON and URL-encoded data, respectively.